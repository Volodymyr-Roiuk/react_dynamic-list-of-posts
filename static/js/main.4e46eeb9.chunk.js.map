{"version":3,"sources":["components/comment/Comment.js","components/post/Post.js","components/postsList/PostsList.js","Api.js","App.js","index.js"],"names":["PostComment","_ref","userName","commentText","react_default","a","createElement","Comment","Avatar","src","Content","Author","as","Metadata","Text","Post","_ref$post","post","title","body","username","user","commentList","className","Card","Image","wrapped","ui","Header","Description","extra","Icon","name","Group","dividing","map","comment","comment_Comment","email","PostList","state","modifiedPosts","getmodifiedPosts","posts","users","comments","_objectSpread","find","id","userId","filter","postId","sortPostsByFilter","_this","setState","prevState","newPostList","Object","toConsumableArray","sort","b","localeCompare","_this$props","this","props","Fragment","Button","secondary","onClick","bind","post_Post","React","PureComponent","baseURL","getResponse","asyncToGenerator","regenerator_default","mark","_callee","url","response","wrap","_context","prev","next","fetch","sent","abrupt","json","stop","_x","apply","arguments","getPosts","_ref2","_callee2","_context2","concat","getUsers","_ref3","_callee3","_context3","getComments","_ref4","_callee4","_context4","App","isLoading","loadingError","wasLoaded","getInfoFromServer","Promise","all","catch","slicedToArray","_this$state","console","log","loading","PostsList","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.4e46eeb9.chunk.js","sourcesContent":["import React from 'react';\nimport { Comment } from 'semantic-ui-react';\nimport PropTypes from 'prop-types';\n\nconst PostComment = ({ userName, commentText }) => (\n  <Comment>\n    <Comment.Avatar src=\"https://semantic-ui.com/images/avatar/large/chris.jpg\" />\n    <Comment.Content>\n      <Comment.Author as=\"a\">{userName}</Comment.Author>\n      <Comment.Metadata>\n        <div>Today at 5:42PM</div>\n      </Comment.Metadata>\n      <Comment.Text>{commentText}</Comment.Text>\n    </Comment.Content>\n  </Comment>\n);\n\nPostComment.propTypes = {\n  userName: PropTypes.string.isRequired,\n  commentText: PropTypes.string.isRequired,\n};\n\nexport default PostComment;\n","import React from 'react';\nimport { Card, Comment, Header, Image, Icon } from 'semantic-ui-react';\nimport PropTypes from 'prop-types';\nimport PostComment from '../comment/Comment';\n\nconst Post = ({ post: { title, body, user: {username}, commentList } }) => (\n  <div className=\"post\">\n    <Card>\n      <Image src=\"https://react.semantic-ui.com/images/avatar/large/matthew.png\" wrapped ui={false} />\n      <Card.Content>\n        <Card.Header>{title}</Card.Header>\n        <Card.Description>{body}</Card.Description>\n      </Card.Content>\n      <Card.Content extra>\n        <a className=\"postAuthorContainer\">\n          <Icon name=\"user\" />\n          {username}\n        </a>\n        <Comment.Group>\n          <Header as=\"h3\" dividing>\n            Comments\n          </Header>\n          {commentList.map(comment => (\n            <PostComment\n              commentText={comment.body}\n              userName={comment.email}\n            />\n          ))}\n        </Comment.Group>\n      </Card.Content>\n    </Card>\n  </div>\n);\n\nPost.propTypes = {\n  post: PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    body: PropTypes.string.isRequired,\n    user: PropTypes.shape({\n      username: PropTypes.string.isRequired,\n    }),\n    commentList: PropTypes.arrayOf(PropTypes.shape({\n      body: PropTypes.string.isRequired,\n      email: PropTypes.string.isRequired,\n    })),\n  }).isRequired,\n};\n\nexport default Post;\n","import React from 'react';\nimport {Button} from 'semantic-ui-react';\nimport PropTypes from 'prop-types';\nimport Post from '../post/Post';\n\nclass PostList extends React.PureComponent {\n  state = {\n    modifiedPosts: [], // objects which have property user: it's author of the post and comments: it's comments of the post\n  };\n\n  componentDidMount() {\n    const { posts, users, comments } = this.props;\n\n    this.setState({\n      modifiedPosts: this.getmodifiedPosts(posts, users, comments),\n    });\n  }\n\n  getmodifiedPosts = (posts, users, comments) => {\n    return posts.map(post => ({\n      ...post,\n      user: users.find(user => user.id === post.userId),\n      commentList: comments.filter(comment => comment.postId === post.id),\n    }));\n  };\n\n  sortPostsByFilter = (filter) => {\n    this.setState((prevState) => {\n      const newPostList = [...prevState.modifiedPosts];\n\n      if (filter === 'title') {\n        newPostList.sort((a, b) => a.title.localeCompare(b.title));\n      } else if (filter === 'author') {\n        newPostList.sort((a, b) => a.user.name.localeCompare(b.user.name));\n      } else if (filter === 'postContent') {\n        newPostList.sort((a, b) => a.body.localeCompare(b.body));\n      }\n\n      return ({\n        modifiedPosts: newPostList,\n      });\n    });\n  };\n\n  render() {\n    return (\n      <>\n        <div className=\"sortButtonContainer\">\n          <Button secondary onClick={this.sortPostsByFilter.bind(this, 'title')}>Sort by post title</Button>\n          <Button secondary onClick={this.sortPostsByFilter.bind(this, 'author')}>Sort by author name</Button>\n          <Button secondary onClick={this.sortPostsByFilter.bind(this, 'postContent')}>Sort by post text</Button>\n        </div>\n        <section>\n          {this.state.modifiedPosts.map(post => (\n            <Post\n              post={post}\n            />\n          ))}\n        </section>\n      </>\n    );\n  }\n}\n\nPostList.propTypes = {\n  posts: PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    body: PropTypes.string.isRequired,\n  }).isRequired,\n  users: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n  }).isRequired,\n  comments: PropTypes.arrayOf(PropTypes.shape({\n    body: PropTypes.string.isRequired,\n    email: PropTypes.string.isRequired,\n    userId: PropTypes.number.isRequired,\n  })).isRequired,\n};\n\nexport default PostList;\n","const baseURL = 'https://jsonplaceholder.typicode.com';\n\nconst getResponse = async (url) => {\n  const response = await fetch(url);\n\n  return response.json();\n};\n\nexport const getPosts = async () => {\n  return await getResponse(`${baseURL}/posts`);\n};\n\nexport const getUsers = async () => {\n  return await getResponse(`${baseURL}/users`);\n};\n\nexport const getComments = async () => {\n  return await getResponse(`${baseURL}/comments`);\n};\n\n\n","import React from 'react';\nimport './App.css';\nimport { Button } from 'semantic-ui-react';\nimport PostList from './components/postsList/PostsList';\nimport { getPosts, getUsers, getComments } from './Api';\n\nclass App extends React.PureComponent {\n  state = {\n    posts: [],\n    users: [],\n    comments: [],\n    isLoading: false,\n    loadingError: false,\n    wasLoaded: false,\n  };\n\n  getInfoFromServer = async () => {\n    this.setState({\n      isLoading: true,\n      wasLoaded: true,\n    });\n\n    const [posts, users, comments] = await Promise.all([getPosts(), getUsers(), getComments()])\n      .catch(() => this.setState({\n        loadingError: true,\n        isLoading: false,\n      }));\n\n    this.setState({\n      posts: posts,\n      users: users,\n      comments: comments,\n      isLoading: false,\n      loadingError: false,\n    });\n  }\n\n  render() {\n    const { posts, users, comments, isLoading, loadingError, wasLoaded } = this.state;\n    console.log(this.state);\n\n    if (!isLoading && !wasLoaded) {\n      return <Button secondary onClick={this.getInfoFromServer}>Load posts from server</Button>;\n    } else if (isLoading) {\n      return <Button secondary loading>Loading</Button>;\n    }\n\n    if (wasLoaded && !loadingError) {\n      return <PostList posts={posts} users={users} comments={comments} />;\n    } else if (wasLoaded && loadingError) {\n      return (\n        <>\n          <p>Loading error, please try again!</p>\n          <Button secondary onClick={this.getInfoFromServer}>Try again</Button>\n        </>\n      );\n    }\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}